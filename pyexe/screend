#!/usr/bin/env python3
# vim:fileencoding=utf-8

'''
锁屏、设置 empathy 状态、etc
'''

IDLE_TIME = 5 # 单位：分
CHECK_INTERNAL = 30 # 单位：秒

import os
import sys
import select
from time import sleep
from subprocess import call, getoutput
import logging
import signal
import X

FIFO = '/dev/shm/screend'
pid_file = '/var/lock/screend.pid'
screen_locked = False
our_leave = False
sys.stderr = open('/tmp/screed.log', 'w')
# logging.basicConfig(level=logging.DEBUG)

def sigterm(signum, frame):
  sys.exit()

signal.signal(signal.SIGTERM, sigterm)

def screensaver_on():
  # customizable
  ans = getoutput('LANG=C gnome-screensaver-command -q')
  logging.debug(ans)
  return ans.find(' active') != -1

def monitor_off():
  logging.debug('monitor off')
  return call(['xset', 'dpms', 'force', 'off'])

def lockscreen():
  global screen_locked
  st1 = call(['gnome-screensaver-command', '-l'])
  sleep(1)
  st2 = monitor_off()
  if not any((st1, st2)):
    screen_locked = True

def empathy_leave(state):
  global our_leave
  st = 1
  if state:
    st = call(['setstatus', 'away', 'away from keyboard'])
  elif our_leave:
    st = call(['setstatus', 'available'])
  if st == 0:
    our_leave = state

def main():
  global screen_locked
  if not os.path.exists(FIFO):
    os.mkfifo(FIFO)
  d = X.Display()
  fd = os.open(FIFO, os.O_NONBLOCK | os.O_RDONLY)
  timeout = CHECK_INTERNAL
  screenon = False
  while True:
    if select.select([fd], [], [], timeout)[0]:
      req = os.read(fd, 1024)
      logging.debug('got request: %r', req)
      if req.strip() == b'lock':
        lockscreen()
        empathy_leave(True)
      elif not req:
        os.close(fd)
        fd = os.open(FIFO, os.O_NONBLOCK | os.O_RDONLY)
    elif not screen_locked and d.idletime() > IDLE_TIME * 1000 * 60:
      logging.debug('idle, locking screen')
      lockscreen()
      empathy_leave(True)
    elif screensaver_on():
      # accidentally turned on, let's turn it off again
      if screenon and d.idletime() > CHECK_INTERNAL * 1000:
        logging.debug('timedout, turn off again')
        d.key(66) # Escape
        d.flush()
        monitor_off()
        timeout = CHECK_INTERNAL
        screenon = False
      else:
        logging.debug('to be turned off if no action')
        timeout = max(CHECK_INTERNAL - d.idletime() / 1000, 3)
        screenon = True
    else:
      logging.debug('I\'m back')
      screen_locked = False
      empathy_leave(False)

if __name__ == '__main__':
  from pidfile import Daemonized

  with Daemonized(pid_file):
    try:
      main()
    finally:
      os.unlink(FIFO)
