#!/usr/bin/env python3
# vim:fileencoding=utf-8

from gi.repository import Gtk

icon_mounted = 'document-new'
icon_nomount = 'gtk-file'
icon_nodrive = 'ascii'

class AutoMountIcon(Gtk.StatusIcon):
  def __init__(self):
    super().__init__()
    self.set_from_icon_name(icon_nodrive)
    self.drives = []
    self.menu = Gtk.Menu()
    self.connect('popup-menu', self.popup)
    self.connect('activate', self.click)

  def add_menu(self, menuitem):
    self.menu.append(menuitem)

  def add_separator(self):
    # have to use `.new` here, or we'll get a blank MenuItem
    item = Gtk.SeparatorMenuItem.new()
    self.add_menu(item)

  def start(self):
    self.menu.show_all()
    Gtk.main()

  def quit(self, data=None):
    Gtk.main_quit()

  def popup(self, icon, button, time):
    self.menu.popup(None, None, None, None, button, time)

  def click(self, icon):
    self.popup(icon, 1, Gtk.get_current_event_time())

  def add_drive(self, drive):
    self.drives.append(drive)
    self.update_icon()
    self.update_menu()

  def update_menu(self):
    for i in self.menu:
      self.menu.remove(i)

    for drive in self.drives:
      self.add_menu(drive)
      for i in drive.children:
        self.add_menu(i)
      self.add_separator()

    quit = Gtk.ImageMenuItem.new_from_stock(Gtk.STOCK_QUIT, None)
    quit.connect('activate', self.quit)
    self.add_menu(quit)

  def update_icon(self):
    if self.has_drive:
      if self.has_mounted:
        icon = icon_mounted
      else:
        icon = icon_nomount
    else:
      icon = icon_nodrive
    self.set_from_icon_name(icon)

  @property
  def has_drive(self):
    return len(self.drives) != 0

  @property
  def has_mounted(self):
    for drive in self.drives:
      for i in drive.children:
        if i.mounted:
          return True
    return False

class Drive(Gtk.MenuItem):
  unmounting_all = False
  def __init__(self, dev, icon):
    self.dev = dev
    self.icon = icon
    super().__init__('磁盘 %s' % dev)
    self.children = []
    self.set_sensitive(False)
    self.connect('activate', self.umount_drive)

  def umount_drive(self, menuitem):
    self.unmounting_all = True

    for i in self.children:
      i.set_active(False)
    self.icon.update_icon()
    self.update_label(False)

    self.unmounting_all = False

  def update_label(self, mounted):
    if mounted:
      label = '卸载磁盘 %s 上的所有分区' % self.dev
    else:
      label = '磁盘 %s' % self.dev
    self.set_label(label)
    self.set_sensitive(mounted)

  def add_partition(self, dev, label):
    part = Partition(dev, label, self)

class Partition(Gtk.CheckMenuItem):
  mounted = False
  def __init__(self, dev, label, parent):
    self.dev = dev
    super().__init__('%s (未挂载)' % dev)
    self.connect("activate", self.toggle_mount)
    self.parent = parent
    self.label = label
    parent.children.append(self)

  def toggle_mount(self, menuitem):
    p = self.parent
    do_mount = self.mounted = self.get_active()
    if do_mount:
      label = '%s (已挂载到 /media/%s)' % (self.dev, self.label)
      self.set_label(label)
    else:
      label = '%s (未挂载)' % self.dev
      self.set_label(label)
    p.icon.update_icon()
    if not p.unmounting_all:
      p.update_label(do_mount)

def test():
  app = AutoMountIcon()
  drive = Drive('/dev/sdc', app)
  drive.add_partition('/dev/sdc1', 'test')
  drive.add_partition('/dev/sdc2', 'abc')
  app.add_drive(drive)

  drive = Drive('/dev/sdc', app)
  drive.add_partition('/dev/sdc1', 'test')
  drive.add_partition('/dev/sdc2', 'abc')
  app.add_drive(drive)

  app.start()

if __name__ == '__main__':
  test()
